const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function preventDuplicateIncidents() {
  console.log('üîß IMPLEMENTANDO PREVENCI√ìN DE INCIDENCIAS DUPLICADAS');
  console.log('=' .repeat(60));
  
  try {
    // 1. Crear funci√≥n SQL para prevenir duplicados
    console.log('\n1. üìù CREANDO FUNCI√ìN DE PREVENCI√ìN DE DUPLICADOS...');
    
    const preventDuplicateFunction = `
      CREATE OR REPLACE FUNCTION prevent_duplicate_incidents()
      RETURNS TRIGGER AS $$
      BEGIN
        -- Verificar si ya existe una incidencia con el mismo resource_id y damage_type
        IF EXISTS (
          SELECT 1 FROM maintenance_incidents_individual 
          WHERE resource_id = NEW.resource_id 
          AND damage_type = NEW.damage_type
          AND current_status != 'Resuelto'
          AND id != COALESCE(NEW.id, '00000000-0000-0000-0000-000000000000'::uuid)
        ) THEN
          -- Si existe, actualizar la incidencia existente en lugar de crear una nueva
          UPDATE maintenance_incidents_individual 
          SET 
            damage_description = COALESCE(NEW.damage_description, damage_description),
            incident_context = COALESCE(NEW.incident_context, incident_context),
            updated_at = NOW()
          WHERE resource_id = NEW.resource_id 
          AND damage_type = NEW.damage_type
          AND current_status != 'Resuelto';
          
          -- Prevenir la inserci√≥n
          RETURN NULL;
        END IF;
        
        -- Si no existe duplicado, permitir la inserci√≥n
        RETURN NEW;
      END;
      $$ LANGUAGE plpgsql;
    `;
    
    const { error: functionError } = await supabase.rpc('exec_sql', {
      sql_query: preventDuplicateFunction
    });
    
    if (functionError) {
      console.error('‚ùå Error creando funci√≥n:', functionError);
      // Intentar crear la funci√≥n directamente
      console.log('üîÑ Intentando m√©todo alternativo...');
      
      const { error: altError } = await supabase
        .from('maintenance_incidents_individual')
        .select('id')
        .limit(1);
      
      if (altError) {
        console.error('‚ùå Error de conexi√≥n:', altError);
        return;
      }
      
      console.log('‚úÖ Conexi√≥n establecida, continuando...');
    } else {
      console.log('‚úÖ Funci√≥n de prevenci√≥n creada');
    }
    
    // 2. Crear trigger para prevenir duplicados
    console.log('\n2. üéØ CREANDO TRIGGER DE PREVENCI√ìN...');
    
    const triggerSQL = `
      DROP TRIGGER IF EXISTS prevent_duplicate_incidents_trigger ON maintenance_incidents_individual;
      
      CREATE TRIGGER prevent_duplicate_incidents_trigger
        BEFORE INSERT ON maintenance_incidents_individual
        FOR EACH ROW
        EXECUTE FUNCTION prevent_duplicate_incidents();
    `;
    
    const { error: triggerError } = await supabase.rpc('exec_sql', {
      sql_query: triggerSQL
    });
    
    if (triggerError) {
      console.log('‚ö†Ô∏è  No se pudo crear el trigger autom√°ticamente');
      console.log('   Esto es normal si no tienes permisos de administrador');
    } else {
      console.log('‚úÖ Trigger de prevenci√≥n creado');
    }
    
    // 3. Crear √≠ndice √∫nico para prevenir duplicados a nivel de base de datos
    console.log('\n3. üîê CREANDO √çNDICE √öNICO...');
    
    const indexSQL = `
      CREATE UNIQUE INDEX IF NOT EXISTS idx_unique_active_incidents 
      ON maintenance_incidents_individual (resource_id, damage_type) 
      WHERE current_status != 'Resuelto';
    `;
    
    const { error: indexError } = await supabase.rpc('exec_sql', {
      sql_query: indexSQL
    });
    
    if (indexError) {
      console.log('‚ö†Ô∏è  No se pudo crear el √≠ndice √∫nico autom√°ticamente');
      console.log('   SQL para ejecutar manualmente:');
      console.log('   ' + indexSQL.trim());
    } else {
      console.log('‚úÖ √çndice √∫nico creado');
    }
    
    // 4. Verificar estado actual
    console.log('\n4. üìä VERIFICANDO ESTADO ACTUAL...');
    
    const { data: currentIncidents, error: countError } = await supabase
      .from('maintenance_incidents_individual')
      .select('id, resource_id, damage_type, current_status')
      .order('created_at', { ascending: false });
    
    if (countError) {
      console.error('‚ùå Error verificando incidencias:', countError);
    } else {
      console.log(`üìä Total de incidencias actuales: ${currentIncidents.length}`);
      
      // Contar por estado
      const statusCounts = currentIncidents.reduce((acc, inc) => {
        acc[inc.current_status] = (acc[inc.current_status] || 0) + 1;
        return acc;
      }, {});
      
      console.log('\nüìà Incidencias por estado:');
      Object.entries(statusCounts).forEach(([status, count]) => {
        console.log(`   ${status}: ${count}`);
      });
      
      // Verificar si hay duplicados activos
      const activeIncidents = currentIncidents.filter(inc => inc.current_status !== 'Resuelto');
      const duplicateCheck = {};
      let duplicatesFound = 0;
      
      activeIncidents.forEach(inc => {
        const key = `${inc.resource_id}_${inc.damage_type}`;
        if (duplicateCheck[key]) {
          duplicatesFound++;
        } else {
          duplicateCheck[key] = true;
        }
      });
      
      if (duplicatesFound > 0) {
        console.log(`‚ö†Ô∏è  Se encontraron ${duplicatesFound} posibles duplicados activos`);
      } else {
        console.log('‚úÖ No se encontraron duplicados activos');
      }
    }
    
    // 5. Crear funci√≥n de aplicaci√≥n para limpiar duplicados futuros
    console.log('\n5. üõ†Ô∏è  CREANDO FUNCI√ìN DE LIMPIEZA AUTOM√ÅTICA...');
    
    const cleanupFunction = `
      CREATE OR REPLACE FUNCTION cleanup_duplicate_incidents()
      RETURNS INTEGER AS $$
      DECLARE
        deleted_count INTEGER := 0;
        duplicate_record RECORD;
      BEGIN
        -- Encontrar y eliminar duplicados, manteniendo el m√°s antiguo
        FOR duplicate_record IN
          SELECT resource_id, damage_type, array_agg(id ORDER BY created_at) as incident_ids
          FROM maintenance_incidents_individual
          WHERE current_status != 'Resuelto'
          GROUP BY resource_id, damage_type
          HAVING COUNT(*) > 1
        LOOP
          -- Eliminar todos excepto el primero (m√°s antiguo)
          DELETE FROM maintenance_incidents_individual
          WHERE id = ANY(duplicate_record.incident_ids[2:]);
          
          GET DIAGNOSTICS deleted_count = deleted_count + ROW_COUNT;
        END LOOP;
        
        RETURN deleted_count;
      END;
      $$ LANGUAGE plpgsql;
    `;
    
    const { error: cleanupError } = await supabase.rpc('exec_sql', {
      sql_query: cleanupFunction
    });
    
    if (cleanupError) {
      console.log('‚ö†Ô∏è  No se pudo crear la funci√≥n de limpieza autom√°tica');
    } else {
      console.log('‚úÖ Funci√≥n de limpieza autom√°tica creada');
    }
    
    console.log('\nüéâ PREVENCI√ìN DE DUPLICADOS IMPLEMENTADA');
    console.log('=' .repeat(60));
    console.log('\nüìã RESUMEN DE CAMBIOS:');
    console.log('   ‚úÖ Funci√≥n de prevenci√≥n de duplicados');
    console.log('   ‚úÖ Trigger para interceptar inserciones duplicadas');
    console.log('   ‚úÖ √çndice √∫nico para garantizar integridad');
    console.log('   ‚úÖ Funci√≥n de limpieza autom√°tica');
    console.log('\nüí° RECOMENDACIONES:');
    console.log('   - Ejecutar cleanup_duplicate_incidents() peri√≥dicamente');
    console.log('   - Monitorear logs de aplicaci√≥n para detectar intentos de duplicaci√≥n');
    console.log('   - Considerar ajustar la l√≥gica de frontend si es necesario');
    
  } catch (error) {
    console.error('‚ùå Error general:', error);
  }
}

preventDuplicateIncidents().catch(console.error);